apiVersion: apps/v1
kind: Deployment
metadata:
  name: company
  labels:
    app: company
spec:
  selector:
    matchLabels:
      app: company
  replicas: 1
  revisionHistoryLimit: 0
  template:
    metadata:
      name: company
      labels:
        app: company
    spec:
      containers:
        - name: company
          image: myacr.azurecr.io/company:latest
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: PROFILE
          imagePullPolicy: IfNotPresent
          ports:
          - containerPort: 8080
          livenessProbe:
            httpGet:
              path: /api/company/health
              port: 8080
            initialDelaySeconds: 30
            periodSeconds: 5
          readinessProbe:
            tcpSocket:
              port: 8080
            initialDelaySeconds: 30
            periodSeconds: 10
      nodeSelector:
        app: area2
      restartPolicy: Always
      
---

apiVersion: v1
kind: Service
metadata:
  name: company-service
spec:
  selector:
    app: company
  ports:
    - port: 80
      targetPort: 8080
      protocol: TCP
  type: ClusterIP

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: customer
  labels:
    app: customer
spec:
  selector:
    matchLabels:
      app: customer
  replicas: 1
  revisionHistoryLimit: 0
  template:
    metadata:
      name: customer
      labels:
        app: customer
    spec:
      containers:
        - name: customer
          image: myacr.azurecr.io/customer:latest
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: PROFILE
          imagePullPolicy: IfNotPresent
          ports:
          - containerPort: 8080
          livenessProbe:
            httpGet:
              path: /api/customer/health
              port: 8080
            initialDelaySeconds: 10
            periodSeconds: 5
          readinessProbe:
            tcpSocket:
              port: 8080
            initialDelaySeconds: 10
            periodSeconds: 5
      nodeSelector:
        app: area1
      restartPolicy: Always

---

apiVersion: v1
kind: Service
metadata:
  name: customer-service
spec:
  selector:
    app: customer
  ports:
    - port: 80
      targetPort: 8080
      protocol: TCP
  type: ClusterIP

---

apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: nginx
    certmanager.k8s.io/cluster-issuer: letsencrypt-prod
    ingress.kubernetes.io/service-upstream: "true"
    kubernetes.io/tls-acme: "true"
    kubernetes.io/ingress.allow-http: "false"
    nginx.ingress.kubernetes.io/rewrite-target: /$1$2$3
    nginx.ingress.kubernetes.io/app-root: /$1/swagger-ui.html
    nginx.ingress.kubernetes.io/from-to-www-redirect: "true"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "false"
    nginx.ingress.kubernetes.io/proxy-body-size: "1M"
  name: ingress-aks
spec:
  tls:
  - hosts:
    - myapp-dev.eastus2.cloudapp.azure.com
  rules: 
  - host:
    http:
      paths:
      - backend: 
          serviceName: company-service
          servicePort: 80
        path: /(api/company)(/|$)(.*)
      - backend:
          serviceName: customer-service
          servicePort: 80
        path: /(api/customer)(/|$)(.*)